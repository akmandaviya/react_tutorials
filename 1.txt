What is React and its advantages ?
--> React is an open-source js librabry to build single page UI, developed by Facebook
    in react we build components which are re-usable, every react application is a tree of component.
      
      >> Composable => it saves time, we can divide the lines of codes into components, and then can utilize this components and integrate them into one plce
      >> Declarative => We can make interactive UIs by changing the state of the component and React takes care of updating the DOM according to it.
         This means we never interact with DOM. 
      >> Write once, use anywhere => it has code resuability, due to component-based approach
      >> SEO freindly
      >> Fast,efficient and easy to learn 


     The advantages of React?
Below are the list of main advantages of React,

Increases the application's performance with Virtual DOM.
JSX makes code easy to read and write.
It renders both on client and server side (SSR).
Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.
Easy to write unit and integration tests with tools such as Jest.


-->What are the limitations of React?
  React is just a view library, not a full framework.
  There is a learning curve for beginners who are new to web development.
  Integrating React into a traditional MVC framework requires some additional configuration.
  The code complexity increases with inline templating and JSX.
  Too many smaller components leading to over engineering or boilerplate.


What is virtual DOM ?
--> The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with 
    the “real” DOM by a library such as ReactDOM. This process is called reconciliation.This approach enables the declarative API of React. 
    We tell React what state we want the UI to be in, and it makes sure the DOM matches that state

    The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the "real" DOM. 
    It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation

What are props?
-->Props/Properties is the optional input the component can accept, it also allows the component to be dynamic

What are pure components ?
-->React will always re-render the component each time there is a change in state or props value.
   A Pure Component is a component that performs a check on the value of React props before deciding whether to re-render the component or not
    Ex:-  import React, {Component, PureComponent} from 'react';

import React, {Component, PureComponent} from 'react';

class App extends React.PureComponent {
  constructor() {
    super()
    this.state ={
      data:10
    } 
  }
  render() {
    console.log(this.state)
    return ( 
      <div>
      <h1> Here showing Pure Components =  {this.state.data}</h1>
      <button onClick = {()=> {this.setState({data:20})}}>Change the state</button>
      </div>
    )
  }
}
export default App


--> What is the use of refs?
    The ref is used to return a reference to the element. They should be avoided in most cases, however, 
    they can be useful when you need a direct access to the DOM element or an instance of a component.

--> What are controlled components?
    A component that controls the input elements within the forms on subsequent user input is called Controlled Component, 
    i.e, every state mutation will have an associated handler function.

     For example, to write all the names in uppercase letters, we use handleChange as below,

     handleChange(event) {
        this.setState({value: event.target.value.toUpperCase()}) 
       }    

--> What are uncontrolled components?
    The Uncontrolled Components are the ones that store their own state internally, and we query the DOM using a ref to find its current value when we need it.

--> What are stateless components?
  If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components.
  But unless you need to use a lifecycle hook in your components, you should go for function components.
  There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, 
  and you can avoid the this keyword altogether.    

--> What are stateful components?
   If the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. 
   These stateful components are always class components and have a state that gets initialized in the constructor.
     EX:
        class App extends Component {
           constructor(props) {
          super(props)
          this.state = { count: 0 }
       }

               render() {
                  // ...
       }
    }

--> What are fragments?
    It's a common pattern in React which is used for a component to return multiple elements. 
    Fragments let you group a list of children without adding extra nodes to the DOM.
       render() {
     return (
    <React.Fragment>
      <ChildA />
      <ChildB />
      <ChildC />
    </React.Fragment>
  )
}


--> What is React Router?
  React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, 
  all while keeping the URL in sync with what's being displayed on the page.

-->What is prop drilling?
  Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components 
  that do not need the data but only help in passing it around.

-->What is context API ?
  Context provides a way to pass data through the component tree without having to pass props down manually at every level.   









    